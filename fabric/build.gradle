plugins {
	id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
	platformSetupLoomIde()
	fabric()
}
loom {
	accessWidenerPath = project(":common").loom.accessWidenerPath
}
configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}
dependencies {
	modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
	modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
	modApi "dev.architectury:architectury-fabric:${architectury_version}"
	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
	// ModMenu
	modApi("com.terraformersmc:modmenu:${modmenu_version}") { transitive(false) }
	
}
shadowJar {
	exclude "architectury.common.json"
	configurations = [project.configurations.shadowCommon]
	archiveClassifier = "dev-shadow"
}
remapJar {
	injectAccessWidener = true
	input.set shadowJar.archiveFile
	dependsOn shadowJar
}
sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map {
		zipTree(it)
	}
}
base {
	archivesName = rootProject.archiveFileNameOfPlatform("fabric")
	version = ""
}
components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}
publishing {
	publications {
		mavenFabric(MavenPublication) {
			artifactId = mod_id + "-" + project.name
			from components.java
		}
	}
	
	repositories {
	}
}
