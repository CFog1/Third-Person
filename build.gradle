plugins {
	id "architectury-plugin" version "3.4-SNAPSHOT"
	id "dev.architectury.loom" version "1.3-SNAPSHOT" apply false
}
architectury {
	minecraft = minecraft_version
}
subprojects {
	apply plugin: "dev.architectury.loom"
	loom { silentMojangMappingsLicense() }
	dependencies {
		minecraft "com.mojang:minecraft:${minecraft_version}"
		mappings loom.officialMojangMappings()
	}
	
	processResources {
		eachFile { expand rootProject.properties }
	}
}

allprojects {
	apply plugin: "java"
	apply plugin: "architectury-plugin"
	apply plugin: "maven-publish"
	base { archivesName = mod_id }
	version = mod_version
	group = mod_group_id
	repositories {
		mavenLocal()
		
		mavenCentral()
		maven { url 'https://maven.aliyun.com/repository/public' }
		maven { url 'https://maven.aliyun.com/repository/google' }
		
		maven { url "https://jitpack.io" }
		// ModMenu
		maven { url "https://maven.terraformersmc.com/releases" }
	}
	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
		options.release = 17
	}
	java {
		withSourcesJar()
	}
	jar {
		setDuplicatesStrategy DuplicatesStrategy.INCLUDE
		from rootProject.file("LICENSE.txt")
	}
}

// 生成文件名格式
def archiveFileNameOfPlatform(String platform){
	switch(platform) {
		case "forge":
			return "${mod_id}-v${mod_version}-mc${minecraft_version}-forge";
		case "fabric":
			return "${mod_id}-v${mod_version}-mc${minecraft_version}-fabric";
		default:
			throw new IllegalArgumentException("Unknown platform: $platform");
	}
}
